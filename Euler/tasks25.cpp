#include "tasks25.h"
#include <string>
#include <vector>
#include <cstdio>
#include <cassert>
#include <random>
//#include <algorithm>


size_t fibonachi_even()
{
	/*
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms
*/
	size_t rez = 1;
	size_t sum = 0;
	size_t prev = 0;
	int cnt = 0;
	while (rez<4000000)
		{
			rez = rez + prev;
			prev = rez - prev;
			++cnt;
			std::cout <<"cnt= " << cnt;
			std::cout << '\t' <<"prev= " << prev << std::endl;
			if(prev%2 == 0)
				{
					sum = sum + prev;
					std::cout << "sum = " << sum << std::endl;
				}
		}
	rez = prev;
	return rez;
}

void factor()
{
	/*
The prime factors of 13195 are 5, 7, 13 and 29.
What is the largest prime factor of the number 600851475143 ?
*/
	size_t num = 600851475143;
	primul (num);
}

size_t primul(size_t num)
{
	size_t mul = 2;
	while(num%mul!=0)
		{
			++mul;
		}
	num=num/mul;
	std::cout << "num= " << num << ";\nmul= " << mul << std::endl;
	if (num != 1)
		{
			primul (num);
		}
	return num;
}

size_t palindrom()
{
	/*
	A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
	Find the largest palindrome made from the product of two 3-digit numbers.
	*/
	//char buffer[100000+1] = {'\0'};
	//scanf("%100000s", buffer);
	char buffer[100000+1] = "_A_B_A_A_B_C_A_A_C_B_A_A_B_A_";
	std::string s(buffer);
	/*{
		std::vector<char> t;
		t.push_back(' ');
		for(char c : s)
			{
				t.push_back(c);
				t.push_back(' ');
			}
		s = std::string(t.begin(), t.end());
	}*/
	size_t n = size_t(s.size());
	printf("s=%s; n=%d\n", s.c_str(), int(n));

	std::vector<size_t> RO(n,1);
	int left = 0;
	int right = 0;
	for (int i = 1; i<int(n); ++i)
		{
			int L = 0;
			int R = 0;
			if (i > right)
				{
					L = int(i);
					R = int(i);
				}
			else
				{
					assert((right + left)/2 < i );
					//i+ rev == right + left
					int mi = int(right + left - i);
					//printf("i= %d, mi= %d, RO[mi]=%d\n", i, mi, RO[mi]);
					L = i - RO[mi] + 1;
					R = i + RO[mi] - 1;
					if(R > right)
						{
							int d = R - right;
							R -= d;
							L += d;
						}
					printf("i= %d, mi= %d, RO[mi]=%d, L= %d, R= %d\n\n", i, mi, RO[mi], L, R);
				}
			while(L - 1 >= 0 && R + 1 <= int(n) && s[L - 1] == s[R + 1])
				{
					L--;
					R++;
				}
			RO[i] = R - i + 1 ;
			if (R > right)
				{
					left = L;
					right = R;
				}
			printf("RO[%d]= %d left= %d right= %d \n", i, int(RO[i]), left , right);
		}
	long long int count = 0;
	for (int value : RO)
		{

			count += value /2;
		}
	printf("count= %lld\n", count);
for (int positionString = 0; positionString < s.length(); ++positionString)
	{
		std::cout << s[positionString] << " ";
		if(positionString == 13)
			{
				std::cout << " ";
			}
	}
std::cout << std::endl;
	for(int cnt =0; cnt < 29 ; ++cnt )
		{
			printf("%d ", RO[cnt]);
		}
	return 1;
}

void manacher(size_t digit)
{
	size_t number = 1;
	for(size_t i = 0; i < digit; ++i)
		{
			number *=10;
		}
	number -=1;
	const size_t stringLenght = number*number;
	char palindromString[stringLenght];
std::random_device rd;
std::mt19937_64 mt_rand(rd());
std::uniform_int_distribution<size_t> dist('A', 'Z');
for (size_t iter = 0; iter < stringLenght; ++iter) {
		palindromString[iter] = dist(mt_rand);
	}



for(size_t iter = 0; iter < 20; ++iter)
	{
		std::cout << palindromString[iter];
	}
	std::cout  << std::endl;


}
